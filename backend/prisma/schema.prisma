generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id                String       @id @default(uuid()) @db.Char(36)
  role              RoleType
  room_member_roles RoomMember[]
  users             User[]

  @@map("roles")
}

model User {
  id                  String          @id @default(uuid()) @db.Char(36)
  name                String
  email               String
  password            String
  photo               String
  role_id             String
  payouts             Payout[]
  room_members        RoomMember[]
  room_message        RoomMessage[]
  room                Room[]          @relation("UserCreateRelation")
  owner_transactions  Transaction[]   @relation("TransactionOwnerRelation")
  member_transactions Transaction[]   @relation("TransactionMemberRelation")
  password_resets     PasswordReset[]
  role                Role            @relation(fields: [role_id], references: [id])

  @@map("users")
}

model Group {
  id           String        @id @default(uuid()) @db.Char(36)
  name         String
  photo        String
  type         GroupType
  about        String
  benefit      String[]
  price        Int
  created_at   DateTime      @default(now())
  assets       GroupAsset[]
  transactions Transaction[]

  @@map("groups")
}

model GroupAsset {
  id       String @id @default(uuid()) @db.Char(36)
  group_id String
  filename String
  group    Group  @relation(fields: [group_id], references: [id])

  @@map("group_assets")
}

model Room {
  id              String        @id @default(uuid()) @db.Char(30)
  name            String?
  is_group        Boolean       @default(false)
  created_by      String
  created_at      DateTime      @default(now())
  members         RoomMember[]
  messages        RoomMessage[]
  created_by_user User          @relation("UserCreateRelation", fields: [created_by], references: [id])

  @@map("rooms")
}

model RoomMember {
  id        String   @id @default(uuid()) @db.Char(30)
  room_id   String
  user_id   String
  role_id   String
  joined_at DateTime @default(now())
  role      Role     @relation(fields: [role_id], references: [id])
  room      Room     @relation(fields: [room_id], references: [id])
  user      User     @relation(fields: [user_id], references: [id])

  @@map("room_members")
}

model RoomMessage {
  id         String       @id @default(uuid()) @db.Char(30)
  room_id    String
  sender_id  String
  content    String
  type       MessageType? @default(TEXT)
  created_at DateTime     @default(now())
  room       Room         @relation(fields: [room_id], references: [id])
  user       User         @relation(fields: [sender_id], references: [id])

  @@map("room_messages")
}

model PasswordReset {
  id      String @id @default(uuid()) @db.Char(30)
  user_id String
  token   String @db.VarChar(64)
  user    User   @relation(fields: [user_id], references: [id])

  @@map("user_password_resets")
}

model Transaction {
  id         String           @id @default(uuid()) @db.Char(30)
  owner_id   String
  user_id    String
  group_id   String
  price      Int
  type       TransactionType? @default(PENDING)
  created_at DateTime         @default(now())
  group      Group            @relation(fields: [group_id], references: [id])
  owner      User             @relation("TransactionOwnerRelation", fields: [owner_id], references: [id])
  user       User             @relation("TransactionMemberRelation", fields: [user_id], references: [id])

  @@map("transactions")
}

model Payout {
  id                  String           @id @default(uuid()) @db.Char(30)
  user_id             String
  amount              Int
  bank_name           String
  bank_account_number String
  bank_account_name   String
  status              TransactionType? @default(PENDING)
  proof               String?
  created_at          DateTime         @default(now())
  user                User             @relation(fields: [user_id], references: [id])

  @@map("payouts")
}

enum RoleType {
  ADMIN
  USER
  OWNER
  MEMBER
}

enum GroupType {
  FREE
  PAID
}

enum MessageType {
  TEXT
  IMAGE
}

enum TransactionType {
  PENDING
  SUCCESS
  FAILED
}
